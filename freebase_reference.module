<?php

/**
 * @file
 * A Freebase reference field.
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 */
function freebase_reference_field_info() {
  return array(
    'freebase_reference' => array(
      'label' => t('Freebase reference'),
      'description' => t('Freebase reference for selecting Freebase topics.'),
      'settings' => array(
        'fb_types' => null,
      ),
      'instance_settings' => array(),
      'default_widget' => 'freebase_reference_autocomplete',
      'default_formatter' => 'freebase_reference_combined_text',
      'property_type' => 'text',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 */
function freebase_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
}


/**
 * Implements hook_field_is_empty().
 */
function freebase_reference_field_is_empty($item, $field) {
  return empty($item['mid']);
}

/***********************************************************************
 *  Field Type API: Formatter
 *
 *  These are the api hooks that present formatted (themed) output to the
 *  user.
 **********************************************************************/

/**
 * Implements hook_field_formatter_info().
 */
function freebase_reference_field_formatter_info() {
  return array(
    // Topic name + mid e.g. 'Fish [mid: /m/234sdf]'
    'freebase_reference_combined_text' => array(
      'label' => t('Freebase reference combined topic name + mid formatter'),
      'field types' => array('freebase_reference'),
    ),
    // mid
    'freebase_reference_mid' => array(
      'label' => t('Freebase reference mid formatter'),
      'field types' => array('freebase_reference'),
    ),

    // mid
    'freebase_reference_name' => array(
      'label' => t('Freebase reference topic name formatter'),
      'field types' => array('freebase_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function freebase_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {

    // Combined name + mid
    case 'freebase_reference_combined_text':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = $item['name'] . " [mid: " . $item['mid'] . "]";
      }
      break;

    case 'freebase_reference_mid':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = $item['mid'];
      }
      break;

    case 'freebase_reference_name':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = $item['name'];
      }
      break;
  }

  return $element;
}


/**************************************************************************
 * Field Type API: Widget
 *
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 **************************************************************************/

/**
 * Implements hook_field_widget_info().
 */
function freebase_reference_field_widget_info() {
  return array(
    'freebase_reference_autocomplete' => array(
      'label' => t('Freebase suggest widget'),
      'field types' => array('freebase_reference'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 */
function freebase_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $value = ( isset($items[$delta]['mid']) && isset($items[$delta]['name']) ) ? $items[$delta]['name'] . " [mid: " . $items[$delta]['mid'] . "]" : '';

  $element += array(
    '#delta' => $delta,
  );

  $element['fb_ref'] = array();

  // Merge field and instance settings.
  $settings = array_merge($field['settings'], $instance['settings']);

  // Create js settings for the instance.
  $instance_js_settings = array();

  if (isset($settings['fb_types']) && $settings['fb_types'] !== ''){
    $instance_js_settings['fb_types'] = array_map('trim', explode(",", $settings['fb_types']));
  }
  else{
    $instance_js_settings['fb_types'] = '';
  }

  // Package instance js settings with overall js settings.
  $js_settings = array( sprintf("instance_%s", $instance['id']) => $instance_js_settings);


  switch ($instance['widget']['type']) {

    case 'freebase_reference_autocomplete':

      $element += array(
        '#type' => 'fieldset',

        '#delta' => $delta,
        '#attached' => array(
          'css' => array(
            'http://freebaselibs.com/static/suggest/1.3/suggest.min.css' => array('type' => 'external')
          ),
          'js' => array(
            drupal_get_path('module', 'freebase_reference') . '/freebase_reference.js',
            array('data' => 'http://freebaselibs.com/static/suggest/1.3/suggest.min.js', 'type' => 'external'),
            array('data' => array('freebase_reference' => $js_settings), 'type' => 'setting'),
          ),
        ),
        '#element_validate' => array('_freebase_reference_autocomplete_validate'),
      );

      $element['fb_ref_input'] = array(
        '#type' => 'textfield',
        '#default_value' => $value,
        '#attributes' => array(
          'class' => array('freebase_reference-suggest'),
          'freebase_reference-instance_id' => array($instance['id'])
        ),
      );
      $element['mid'] = array(
        '#type' => 'hidden',
      );
      $element['name'] = array(
        '#type' => 'hidden',
      );

      break;
  }

  return $element;

}


/**
 * Validation callback for a node_reference autocomplete element.
 */
function _freebase_reference_autocomplete_validate($element, &$form_state, $form) {

  $field = field_widget_field($element, $form_state);
  $field_name = $field['field_name'];

  $delta = $element['#delta'];

  $value = $form_state['values'][$field_name][$element['#language']][$delta]['fb_ref_input'];

  if (! empty($value)) {

    // If there was valid "XXX: [mid: xxx ]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*mid\s*:\s*(\S+)\s*\]$/', $value, $matches);
    if (! empty($matches)) {

      // Set the elemtent's name and mid values to the corresponding values.
      form_set_value($element, array("name" => $matches[1], "mid" => $matches[2]), $form_state);
    }

    // Otherwise if the input was not valid, set an error for the instance.
    else {
      $instance = field_widget_instance($element, $form_state);
      form_error($element, t('%name: invalid input.  Input must be of the form "Name [mid: XXX]', array('%name' => $instance['label'])));
    }
  }
}




/**
 * Implements hook_field_widget_error().
 */
function freebase_reference_field_widget_error($element, $error, $form, &$form_state) {
}




/**
 * Implements hook_field_widget_settings_form().
 */
function freebase_reference_field_settings_form($field, $instance, $has_data) {

  $field_settings = $field['settings'];

  $form['fb_types'] = array(
    '#type' => 'textfield',
    '#title' => t('Limit selections to specific types'),
    '#description' => t("Show only topics that have the specified types.  Separate type ids with commas e.g. '/film/film, /film/director'.  You can view available types using the section below.  Leave this field blank if you do not want to filter selections by type."),
    '#default_value' => isset($field_settings['fb_types']) ? $field_settings['fb_types'] : '',
  );

  $form['fb_types_helper'] = array(
    '#title' => t('Browse Freebase types'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t("Start typing in the box below to get a list of Freebase types. When you select a type its Freebase type ID will be displayed below.")
  );

  $form['fb_types_helper']['fb_type_autocomplete'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'class' => array('freebase_reference-type-suggest'),
    ),
    '#attached' => array(
      'css' => array(
        array('data' => 'http://freebaselibs.com/static/suggest/1.3/suggest.min.css', 'type' => 'external')
      ),
      'js' => array(
        drupal_get_path('module', 'freebase_reference') . '/freebase_reference.js',
        array('data' => 'http://freebaselibs.com/static/suggest/1.3/suggest.min.js', 'type' => 'external'),
      ),
    ),
  );

  $form['fb_types_helper']['fb_type_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Freebase type ID'),
    '#attributes' => array(
      'class' => array('freebase_reference-type-id'),
    ),
  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function freebase_reference_field_instance_settings_form($field, $instance) {

  $field_settings = $field['settings'];
  $instance_settings = $instance['settings'];

  $form = array();

  return $form;
}
